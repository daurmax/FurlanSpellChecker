[build-system]
requires = ["hatchling>=1.25.0"]
build-backend = "hatchling.build"

[project]
name = "furlanspellchecker"
dynamic = ["version"]
description = "A comprehensive spell checker for the Friulian language with CLI and pipeline service."
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.10"
license = { file = "LICENSE" }
authors = [
  { name = "Massimo Romanin", email = "dev@massimoromanin.com" }
]
keywords = ["spellchecker", "friulian", "furlan", "nlp", "spelling", "text-processing"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
  "Operating System :: OS Independent",
  "Topic :: Text Processing :: Linguistic",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
  "click>=8.1.7",
]

[project.optional-dependencies]
dev = [
  "pytest>=8.0.0",
  "pytest-cov>=4.1.0",
  "pytest-asyncio>=0.23.0",
  "hypothesis>=6.0.0",
  "mypy>=1.10.0",
  "ruff>=0.5.0",
  "black>=24.4.0",
  "types-click>=7.1.8",
]
api = [
  "fastapi>=0.104.0",
  "uvicorn>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/daurmax/FurlanSpellChecker"
Repository = "https://github.com/daurmax/FurlanSpellChecker"
Issues = "https://github.com/daurmax/FurlanSpellChecker/issues"
Documentation = "https://github.com/daurmax/FurlanSpellChecker/blob/main/README.md"

[project.scripts]
furlanspellchecker = "furlan_spellchecker.cli.app:main"

[tool.hatch.version]
path = "src/furlan_spellchecker/__about__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/furlan_spellchecker"]

[tool.black]
line-length = 100
target-version = ["py310"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=furlan_spellchecker",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]